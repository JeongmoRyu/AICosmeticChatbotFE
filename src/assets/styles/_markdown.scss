.markdown {
  table {
    @apply my-4 break-words border-separate border-spacing-x-0 border-spacing-y-0;
  }
  th {
    background-color: rgba(236, 236, 241, 0.9);
    border-bottom-width: 1px;
    border-left-width: 1px;
    border-top-width: 1px;
    padding: 0.25rem 0.75rem;
  }
  th:first-child {
    border-top-left-radius: 0.675rem;
  }
  th:last-child {
    border-right-width: 1px;
    border-top-right-radius: 0.675rem;
  }
  td {
    border-bottom-width: 1px;
    border-left-width: 1px;
    padding: 0.25rem 0.75rem;
  }
  td:last-child {
    border-right-width: 1px;
  }
  tbody tr:last-child td:first-child {
    border-bottom-left-radius: 0.375rem;
  }
  tbody tr:last-child td:last-child {
    border-bottom-right-radius: 0.375rem;
  }

  ol ol,
  ol ul,
  ul ol,
  ul ul {
    margin-bottom: 0;
    margin-left: 1rem;
    margin-top: 0;
  }

  ol {
    counter-reset: list-number;
    display: flex;
    flex-direction: column;
    list-style-type: none;
    padding-left: 0;
  }

  ol > li {
    position: relative;
    counter-increment: list-number;
    display: block;
    margin-bottom: 6px;
    margin-top: 0;
    //min-height: 28px;
  }

  ol > li:before {
    --tw-translate-x: -100%;
    --tw-numeric-spacing: tabular-nums;
    --tw-text-opacity: 1;
    color: rgba(142, 142, 160, var(--tw-text-opacity));
    content: counters(list-number, '.') '.';
    font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing)
      var(--tw-numeric-fraction);
    padding-right: 0.5rem;
    position: absolute;
    -webkit-transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate))
      skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x))
      skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
  }

  ul {
    display: flex;
    flex-direction: column;
    padding-left: 0.5rem;
  }

  ul > li {
    display: block;
    margin: 0;
    margin-bottom: 6px;
    //min-height: 28px;
  }

  // ul:first-child>li {
  //   //padding-left: 1.25rem;
  // }

  ul > li::before {
    --tw-translate-x: -100%;
    content: 'â€¢';
    font-size: 0.875rem;
    line-height: 1.25rem;
    padding-right: 0.5rem;
    position: absolute;
    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x))
      skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
  }
}

.prose :where(table):not(:where([class~='not-prose'] *)) {
  font-size: 0.875em;
  line-height: 1.7142857;
  margin-bottom: 2em;
  margin-top: 2em;
  table-layout: auto;
  text-align: left;
  width: 100%;
}

.prose :where(thead):not(:where([class~='not-prose'] *)) {
  border-bottom-color: #4b5563;
  border-bottom-width: 1px;
}

.prose :where(thead th):not(:where([class~='not-prose'] *)) {
  //color: var(--tw-prose-headings);
  font-weight: 600;
  padding-bottom: 0.5714286em;
  padding-left: 0.5714286em;
  padding-right: 0.5714286em;
  vertical-align: bottom;
}

.prose :where(tbody tr):not(:where([class~='not-prose'] *)) {
  border-bottom-color: #4b5563;
  border-bottom-width: 1px;
}

.prose :where(ol):not(:where([class~='not-prose'] *)) {
  list-style-type: decimal;
  // margin-bottom: 1.25em;
  // margin-top: 1.25em;
  padding-left: 1.625em;
}

.prose :where(ul):not(:where([class~='not-prose'] *)) {
  list-style-type: disc;
  // margin-bottom: 1.25em;
  // margin-top: 1.25em;
  padding-left: 1.625em;
}

.prose :where(ol > li):not(:where([class~='not-prose'] *)) {
  padding-left: 0.375em;
}

.prose :where(ul > li):not(:where([class~='not-prose'] *)) {
  padding-left: 0.375em;
}

.prose :where(li):not(:where([class~='not-prose'] *)) {
  margin-bottom: 0.5em;
  margin-top: 0.5em;
}

.prose :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~='not-prose'] *)) {
  margin-bottom: 0.75em;
  margin-top: 0.75em;
}

// .prose :where(.prose>ol>li>:last-child):not(:where([class~=not-prose] *)) {
//   margin-bottom: 1.25em;
// }

// .prose :where(.prose>ol>li>:first-child):not(:where([class~=not-prose] *)) {
//   margin-top: 1.25em;
// }
